name: Redwood CI

on:
  workflow_dispatch:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  DATABASE_URL: ${{ vars.DATABASE_URL }}
  DATABASE_DIRECT_URL: ${{ vars.DATABASE_DIRECT_URL }}
  TEST_DATABASE_URL: ${{ vars.TEST_DATABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  SUPABASE_URL: ${{ vars.SUPABASE_URL }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_DSN: ${{ vars.SENTRY_DSN }}
  SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
  SENTRY_ORG: ${{ vars.SENTRY_ORG }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      # install all the dependencies
      - run: yarn install
      # run migrations on the actual database
      - run: yarn rw prisma migrate deploy
      # build the redwood app
      - run: yarn rw build
      # run seed script in the actual db
      - run: yarn rw prisma db seed
      # run the linter
      - run: yarn rw lint
      # run the api tests
      - run: yarn rw test api --no-watch
      # run the web tests
      - run: yarn rw test web --no-watch
      # run the type checker
      - run: yarn rw type-check
